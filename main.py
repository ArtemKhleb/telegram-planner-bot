import logging
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from db import add_task, get_tasks, complete_task
from speech_handler import handle_voice_message

TELEGRAM_USER_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É.")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = " ".join(context.args)
    if text:
        result = add_task(text)
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {result}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /–¥–æ–±–∞–≤–∏—Ç—å –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00")

async def tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = get_tasks()
    await update.message.reply_text(result)

async def complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        task_id = context.args[0]
        result = complete_task(task_id)
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /–∑–∞–≤–µ—Ä—à–∏—Ç—å 2")

if __name__ == '__main__':
    from dotenv import load_dotenv
    import os
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–¥–æ–±–∞–≤–∏—Ç—å", add))
    app.add_handler(CommandHandler("–∑–∞–¥–∞—á–∏", tasks))
    app.add_handler(CommandHandler("–∑–∞–≤–µ—Ä—à–∏—Ç—å", complete))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))

    app.run_polling()